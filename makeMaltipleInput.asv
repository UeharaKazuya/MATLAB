function [outputInputPosition,outputInputVelocity] = makeMaltipleInput(t,n_MULTIPLE,DATA,Const)

WIDTH_INDEX = DATA.MULT_END_INDEX - DATA.MULT_START_INDEX + 1;
inputPosition = zeros(length(t),3);
inputVelocity = zeros(length(t),3);

inputPosition(:,1) = t;
inputVelocity(:,1) = t;

inputPosition(1+DATA.STANDBY_INDEX:DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX,2:3) ...
    = Const.Pos(DATA.START_INDEX-DATA.STANDBY_INDEX+1:DATA.MULT_START_INDEX,1:2);
inputVelocity(1+DATA.STANDBY_INDEX:DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX,2:3) ...
    = Const.Vel(DATA.START_INDEX-DATA.STANDBY_INDEX+1:DATA.MULT_START_INDEX,1:2);

for i = 0:n_MULTIPLE-1
    inputPosition((i*WIDTH_INDEX)+1 + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX : (i*WIDTH_INDEX) + WIDTH_INDEX + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX, 2:3) ...
        = Const.Pos(DATA.MULT_START_INDEX:DATA.MULT_END_INDEX, 1:2);
    inputVelocity((i*WIDTH_INDEX)+1 + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX : (i*WIDTH_INDEX) + WIDTH_INDEX + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX, 2:3) ...
        = Const.Vel(DATA.MULT_START_INDEX:DATA.MULT_END_INDEX, 1:2);
end


inputPosition(((n_MULTIPLE-1)*WIDTH_INDEX) + WIDTH_INDEX + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX + 1 : ((n_MULTIPLE-1)*WIDTH_INDEX) + WIDTH_INDEX + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX+ DATA.END_INDEX-DATA.MULT_END_INDEX, 2:3) ...
    = Const.Pos(DATA.MULT_END_INDEX+1 : DATA.END_INDEX, 1:2);
inputVelocity(((n_MULTIPLE-1)*WIDTH_INDEX) + WIDTH_INDEX + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX + 1 : ((n_MULTIPLE-1)*WIDTH_INDEX) + WIDTH_INDEX + DATA.MULT_START_INDEX - DATA.START_INDEX + DATA.STANDBY_INDEX+ DATA.END_INDEX-DATA.MULT_END_INDEX, 2:3) ...
    = Const.Vel(DATA.MULT_END_INDEX+1 : DATA.END_INDEX, 1:2);

%%
outputInputPosition = zeros(length(t),3);
outputInputVelocity = zeros(length(t),3);

outputInputPosition(:,1) = t;
outputInputVelocity(:,1) = t;

outputInputPosition(DATA.STANDBY_LENGTH+1:length(t),:) = inputPosition(1:length(t)-DATA.STANDBY_LENGTH,:);
outputInputVelocity(DATA.STANDBY_LENGTH+1:length(t),:) = inputVelocity(1:,:);

outputInputPosition(1:DATA.STANDBY_LENGTH,:) = zeros(

end

